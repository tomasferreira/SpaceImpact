package org.academiadecodigo.spaceimpact.gameobjects;

import org.academiadecodigo.spaceimpact.gameobjects.projectile.Projectile;
import org.academiadecodigo.spaceimpact.gameobjects.projectile.ProjectileHandler;
import org.academiadecodigo.spaceimpact.gameobjects.spaceships.EnemyShip;
import org.academiadecodigo.spaceimpact.gameobjects.spaceships.PlayerShip;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * Created by codecadet on 25/05/16.
 */
public class CollisionDetector {

    private List<EnemyShip> enemyList;
    private List<Projectile> enemyProjectiles;
    private List<Projectile> playerProjectiles;
    private PlayerShip player;
<<<<<<< HEAD:src/org/academiadecodigo/spaceimpact/gameobjects/CollisionDetector.java
    private LinkedList<GameObject> objects;
    private int destroyedEnemies;

    public CollisionDetector() {

//        objects = new LinkedList<>();
//
//        objects.addAll(enemyList);
//        //objects.addAll(projectiles);
//        //objects.add(player);
//
//
//        for (Projectile p : projectiles) {
//
//            p.getRepresentation().samePosition()
//
//        }
=======
    private ProjectileHandler projectileHandler;
>>>>>>> master:src/org/academiadecodigo/spaceimpact/CollisionDetector.java

    public void setProjectileHandler(ProjectileHandler projectileHandler) {
        this.projectileHandler = projectileHandler;
    }

    public void checkCollision() {

        enemyProjectiles = projectileHandler.getEnemyProjectiles();
        playerProjectiles = projectileHandler.getPlayerProjectiles();

        checkPlayerAndEnemyCollision();
        checkPlayerAndProjectileCollision();
        checkProjectileAndEnemyCollision();
        checkProjectileAndProjectileCollision();

        deleteTrash();
    }

    private void deleteTrash() {
        projectileHandler.deleteDestroyedBullets();

        Iterator<EnemyShip> it = enemyList.iterator();

        while (it.hasNext()) {
            if (it.next().isDestroyed()) {
                it.remove();
            }
        }
    }

    private void checkProjectileAndProjectileCollision() {
        for (Projectile playerProjectile : playerProjectiles) {
            for (Projectile enemyProjectile : enemyProjectiles) {
                if (playerProjectile.objectSamePosition(enemyProjectile)) {
                    playerProjectile.destroy();
                    enemyProjectile.destroy();
                }
            }
        }
    }

    private void checkProjectileAndEnemyCollision() {
        for (Projectile projectile : playerProjectiles) {
            for (EnemyShip enemy : enemyList) {
                if (projectile.objectSamePosition(enemy)) {
                    projectile.destroy();
                    enemy.destroy();
                }
            }
        }
    }

<<<<<<< HEAD:src/org/academiadecodigo/spaceimpact/gameobjects/CollisionDetector.java
    private void checkPlayerCollision(GameObject gameObject) {

        Iterator<EnemyShip> enemyIterator = enemyList.iterator();
        Iterator<Projectile> projectilesIterator;

        while (enemyIterator.hasNext()) {

            EnemyShip e = enemyIterator.next();

            if (gameObject.objectSamePosition(e)) {
                ((PlayerShip) gameObject).destroy();
                e.destroy();
                destroyedEnemies++;
=======
    private void checkPlayerAndProjectileCollision() {
        for (Projectile projectile : enemyProjectiles) {
            if (player.objectSamePosition(projectile)) {
                player.destroy();
                projectile.destroy();
>>>>>>> master:src/org/academiadecodigo/spaceimpact/CollisionDetector.java
            }
        }
    }

    private void checkPlayerAndEnemyCollision() {
        for (EnemyShip enemy : enemyList) {
            if (player.objectSamePosition(enemy)) {
                player.destroy();
                enemy.destroy();
            }
        }
    }

<<<<<<< HEAD:src/org/academiadecodigo/spaceimpact/gameobjects/CollisionDetector.java

    public int getDestroyedEnemies() {
        return destroyedEnemies;
    }

    public void setEnemyList(LinkedList<EnemyShip> enemyList) {
=======
    public void setEnemyList(List<EnemyShip> enemyList) {
>>>>>>> master:src/org/academiadecodigo/spaceimpact/CollisionDetector.java
        this.enemyList = enemyList;
    }

    public void setPlayer(PlayerShip player) {
        this.player = player;
    }
}
